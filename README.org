
#+OPTIONS: ^:nil toc:nil

#+LATEX_HEADER: \usepackage{fullpage}
#+LATEX_HEADER: \usepackage{lmodern}
#+LATEX_HEADER: \renewcommand{\familydefault}{\sfdefault}

* smp_graphs

Specifiy sensorimotor learning experiments as a graph of nodes and a
set of signals, corresponding nicely with the tapping approach. The
basis framework functions are independent of external libs but the
block implementations make use of other /smp/ libs such as
[[https://github.com/x75/smp_base][smp_base]]. The design flow is similar to block based visual programming
approaches and DSP design techniques found in supercollider, puredata,
or gnuradio to name a few.

** Items
 - step, blocksize, ibuf
   - min blocksize after pass 1
   - how to optimize if min(bs) > 1?
   - x make prim blocks blocksize aware
   - x check if logging still works properly
   - x basic blocksize handling

 - hierarchical composition
   - think about these issues: outer vs. inner numsteps and blocksizes,
     how to get data in and out in a subgraph independent way
   - for now: assert inner numsteps <= outer numsteps, could either
     enforce 1 or equality
   - x use blocks that contain other graphs (default2_hierarchical.py)

 - loop block
   - special hierarchical block with additional spec about how often
     and with which variations to iterate the subgraph
   - sequential loop for running block variations e.g hyperopt or evo,
     for now assert blocksize = numloops, one loop iteration returns
     one data point
   - x parallel loop within graph, modify graph. this is different
     from dynamic containment

 - sync / async block execution

 - read/write: ros, osc, ...

 - x logging
   - x std logging OK
   - x include git revision, initial and final config in log
 
 - x networkx for visualization?
   - x standalone networkx graph from final config
   - x graphviz

 - misc stuff
   - x separate header/footer for full config file to remove code
     replication and clutter

 - x two-pass init: complete by putting input init into second pass

 - x base block

 - dict printing for dynamic reconf inspection
   - fix OrderedDict in reconstructed config dicts
   - x print_dict print compilable python code?
   - x basic formatted dict printing. issues: different needs in
     different contexts, runtime version vs. init version. disregard
     runtime version in logging and storage

** Examples

: cd smp_graph/experiments
: python experiment.py --conf conf/default2.conf
: python experiment.py --conf conf/default2_loop.conf

* Notes

This is my 5th attempt at designing a framework for computational
sensorimotor learning experiments. Earlier attempts include
 - *smp_experiments*: defined config as name value pairs and some
   python code wrapping enabling the reuse of singular experiments
   defined elsewhere in an outer loop doing variations (collecting
   statistics, optimizing, ...)
 - *smpblocks*: first attempt at using plain python config files
   containing a dictionary specifying generic computation blocks and
   their connections. granularity was too small and specifying
   connections was too complicated
 - *smq*: tried to be more high-level, introducing three specific and
   fixed modules 'world', 'robot', 'brain'. Alas it turned out that
   left us too inflexible and obviosuly couldn't accomodate any
   experiments deviating from that schema. Is where we are ;)

